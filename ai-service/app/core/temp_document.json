results: {'ids': ['102f147f-7e83-44e3-afb4-9f596c7aa81d', 'ce95fb7e-8820-439b-a497-28bd6425bffe', '3099ede6-d7d6-48e6-9386-c7d2dceebf8f', '0e85ea51-74d5-4e94-a689-43ffb5f18a68', 'cca3f1fe-a67c-431d-8c99-0ae4e792ac9f', '280eff2b-b188-4965-a7c1-c44a6c420652', '06110705-d472-4ee8-9143-6c4cfa94e732', '3eb33e94-fd5b-408c-84e3-6620ec44fd75', '4006737d-c46b-4ca8-a6d6-d1089fc7cf76', '72e9e04c-5cd3-42a4-b0fb-cf679dc76cac', 'e87dc625-a329-4e90-97d3-0dc7607fdf58', '92a09380-a068-404e-8164-4b4112be7b10', 'efef80c4-3bcd-496e-a2f5-e9435d523b89', '1a1ad8b4-4ef7-4710-8d78-f757f9878865', 'f81564b1-c162-42b4-8bf4-a01952595048', '3b02352c-2352-4fa0-aa76-c7518b695ee2', 'e5165a28-39d5-418a-a9e8-c4a710d506d8', '56d45612-ca02-4ab9-a17e-699a7c0c879b', '6a2e8c89-31b6-457e-b180-7c0b698945c3', '7e6d119c-c1a2-4dab-87f1-16d24d48c5d8', '8c745fd8-1b37-4bd0-a88e-cd35ccfb5308', '2db2e125-5e0a-4f2c-b6ad-e2bdaa649d64', 'f48eb6f6-d566-4213-924f-f302f8c86d81', '1fdfd758-e6ad-4bca-9c5f-3e15367f7e72', '54bb950e-78c3-4916-8742-f1ffac3429b5', 'f991d53e-8587-4928-b38a-cdb9b197cb0b', 'da66ca5c-bd06-4fff-ab60-4f396739e328', 'f2ccbb68-500a-4fe7-ab4d-44410df39e4e', '15d53f68-fa8b-4f2b-af9c-a71ca8d951aa', '380a9a2b-6c33-4e68-9a62-e639756d544d', '61a7b953-0afd-4b5c-ae40-cb8c9fd240d5', '73c68867-398c-4e7f-ab22-9f9824955846', 'f3d9f76b-b879-4809-b1ae-594a8da5107d', 'eee9de7b-5cb1-4fe2-8522-7a4c463e6271', 'a817c848-b2a7-4672-9ad1-cc13d8546552', '0bf01f25-e0f4-4f15-bd5b-c93e19b2963d', '908f9f14-c2ab-48f3-9567-1102d40cd3f5', '0bf8aa57-049d-402a-b4ca-ec7955f7353c', '278e449c-1d71-47b7-a6b8-2ca8e1e04772', '7327e1fe-25ee-41f1-b888-c1a9c88f5b1a', 'baa94b3d-c313-43bd-bdaf-d5b880a2a421', 'ee476c0f-c267-41bf-9e67-2529475dc074', '948cf370-4c57-40f3-8a38-71410b6efe9e', '655eeab8-97c1-452e-be25-a27d324b8aed', 'ec4332f1-84f6-44e6-ad81-b9e7c9fdc130', '8baa6ac1-9a67-4d8c-9378-d764544383cd', '65c9c6c6-a129-4665-bb18-c3194005a244', '3c0bd11c-9d0f-4726-8fac-9fd36a1605b3', '18343dad-7873-463d-82ce-2eafb030d43c', '94b38c9e-edee-4d70-bf25-f0b0ac5ae61c'], 'embeddings': None, 'documents': ['รู้จักรูปแบบ Authentication ระหว่าง Frontend และ Backend • Mikelopster', 'mikelopster       Home  Posts  Docs  Resources               Close          Dark Theme                   
                 Table of Contents   #เราจะแบ่งหัวข้อออกจากกันตามนี้   #โจทย์ของหัวข้อนี้เราจะทำ API อะไรกันบ้าง   #1. เราจะเก็บ password ไว้ในฐานข้อมูลอย่างไร ?   #2. เราจะยืนยันได้อย่างไรว่า เราที่เข้า                         ามาคือใคร ?   #3. เราจะทำ login ได้ยังไง ? และทำ login แล้วได้อะไรออกมาเป็นเครื่องยืนยันตัวตน ?   #1. gen token ส่งให้ Frontend เก็บไว้   #2. ใส่ผ่าน cookie เข้า domain Frontend   #3. ใช้ผ่าน session (ไม่                    ต้องผ่าน client)     #4. เราจะป้องกันไม่ให้คนทั่วไปเข้ามายิง API ที่เราไม่อยากให้คนทั่วไปยิงได้ยังไง ?   #1. ผ่าน header Authorization: Bearer <token>   #1. gen token ส่งให้ Frontend เก็บไว้   #2. ผ่าน c                        cookie   #3. เช็คผ่านค่าใน session     #ข้อดี / ข้อเสียของแต่ละวิธี   #วิธีที่ 1 ใช้ web storage เก็บ token   #วิธีที่ 2 ใช้ cookie เก็บ token   #วิธีที่ 3 ใช้ session     #Github   #Reference อื่นๆ                                   รู้จักรูปแบบ Authentication ระหว่าง Frontend และ Backend     6 กันยายน 2566  /  8', 'storage เก็บ token   #วิธีที่ 2 ใช้ cookie เก็บ token   #วิธีที่ 3 ใช้ session     #Github   #Reference อื่นๆ      รู้                     จักรูปแบบ Authentication ระหว่าง Frontend และ Backend     6 กันยายน 2566  /  8 min read          มี Video        มี Github             authentication  ,   role  ,   express  ,   jwt  ,   cookie  ,   sess     sion  ,   bcrypt  ,   security  ,   login  ,   register  ,   web-starter    Share on social media              Table of Contents       #เราจะแบ่งหัวข้อออกจากกันตามนี้  #โจทย์ของหัวข้อนี้เราจะทำ API อะไรกั           นบ้าง  #1. เราจะเก็บ password ไว้ในฐานข้อมูลอย่างไร ?  #2. เราจะยืนยันได้อย่างไรว่า เราที่เข้ามาคือใคร ?  #3. เราจะทำ login ได้ยังไง ? และทำ login แล้วได้อะไรออกมาเป็นเครื่องยืนยันตัวตน ?   #1. gen token                        n ส่งให้ Frontend เก็บไว้  #2. ใส่ผ่าน cookie เข้า domain Frontend  #3. ใช้ผ่าน session (ไม่ต้องผ่าน client)    #4. เราจะป้องกันไม่ให้คนทั่วไปเข้ามายิง API ที่เราไม่อยากให้คนทั่วไปยิงได้ยังไง ?   #1. ผ่าน                             น header Authorization: Bearer <token>  #1. gen token ส่งให้ Frontend', 'session (ไม่ต้องผ่าน client)    #4. เราจะป้องกันไม่ให้คนทั่วไปเข้ามายิง API ที่เราไม่อยากให้คนทั่วไปยิงได้ยังไง ?   #1. ผ่าน header                      r Authorization: Bearer <token>  #1. gen token ส่งให้ Frontend เก็บไว้  #2. ผ่าน cookie  #3. เช็คผ่านค่าใน session    #ข้อดี / ข้อเสียของแต่ละวิธี   #วิธีที่ 1 ใช้ web storage เก็บ token  #วิธีที่ 2 ใช้ c                         cookie เก็บ token  #วิธีที่ 3 ใช้ session    #Github  #Reference อื่นๆ', 'สามารถดู video ของหัวข้อนี้ก่อนได้ ดู video\nเนื้อหานี้ทำมาเนื่องจากใน Web development 101 ที่ผมทำไปก่อนหน้านี้ ผมยังไม่ได้นำเสนอว                              วิธีการทำ Authenticaion ผ่าน Backend เลย\nSession นี้เลยจะพามาทำ login และการทำเรื่องกั้นสิทธิ์ว่าสามารถทำอย่างไรได้บ้าง\nเราจะแบ่งหัวข้อออกจากกันตามนี้\nเราจะมาตอบทั้ง 4 คำถามนี้ใน Session นี้กัน', 'เราจ                            จะเก็บ password ไว้ในฐานข้อมูลอย่างไร ?\nเราจะยืนยันได้อย่างไรว่า เราที่เข้ามาคือใคร ?\nเราจะทำ login ได้ยังไง ? และทำ login แล้วได้อะไรออกมาเป็นเครื่องยืนยันตัวตน ?\nเราจะป้องกันไม่ให้คนทั่วไปเข้ามายิง A                               API ที่เราไม่อยากให้คนทั่วไปยิงได้ยังไง ?\n\nz\n\nสำหรับ project นี้เราจะ setup docker 2 ตัวคือ mysql และ phpmyadmin เท่านั้น\nโดยโจทย์ของ mysql คือเราจะสร้าง table ชื่อ users ขึ้นมาและเราจะทำการเก็บข้อมู                          ล email, password เอาไว่้เพื่อทำการ login', 'docker-compose.yml\nversion: "3.7"\nservices:  db:    image: mysql:latest    container_name: mysql_db    command: --default-authentication-plugin=mysql_native   e_password    environment:      MYSQL_ROOT_PASSWORD: root      MYSQL_DATABASE: tutorial    ports:      - "3306:3306"    volumes:      - mysql_data:/var/lib/mysql    networks:      - my_network\n  phpmyadmin:    image: phpmyadmin/phpmyadmin:latest    container_name: phpmyadmin    environment:      PMA_HOST: db      PMA_PORT: 3306      PMA_USER: root      PMA_PASSWORD: root    ports:      - "8080:80"    depends_on:      - db    networks:      - my_network\nnetworks:  my_network:    driver: bridge\nvolumes:  mysql_data:    driver: local\nStructure project จะเป็นตามนี้\n├── docker-compose.yml├── index.js --  - ไฟล์หลักที่เราจะทำกัน├── package.json└── src    └── index.html\nlibrary ที่ใช้ในรอบนี้', 'express สำหรับ library node สำหรับทำ Rest API\ncors สำหรับการเปิดให้ฝั่ง Frontend สามารถยิงเข้ามาผ่าน cross doma                   ain ได้\nmysql2 สำหรับจัดการฐานข้อมูล mysql\njsonwebtoken สำหรับการเข้ารหัสข้อมูลสำหรับแนบเข้า token ตอน login สำเร็จ\ncookie-parser สำหรับเรียกใช้และ save cookie\nbcrypt สำหรับเข้ารหัส password\nexpress-                  -session สำหรับการ login ในเคสที่ใช้ session', 'โดย index.js เราจะเพิ่ม code ไว้ตามนี้เพื่อ config เริ่มต้นก่อน\nconst cors = require("cors");const express = require("express");const mysql = require("mysq              ql2/promise");const jwt = require("jsonwebtoken");const cookieParser = require("cookie-parser");const session = require("express-session");const bcrypt = require("bcrypt");\nconst app = express();app.use(express.json());app.use(  cors({    credentials: true,    origin: ["http://localhost:8888"],  }),);app.use(cookieParser());\napp.use(  session({    secret: "secret",    resave: false,    saveUninitialized: true,  }),);\nconst port = 8000;const secret = "mysecret";\nlet conn = null;\n