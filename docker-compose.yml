services:
  # db:
  #   image: postgres:16-alpine
  #   restart: always
  #   environment:
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     POSTGRES_DB: ${DB_NAME}
  #   ports:
  #     - "${DB_PORT_LOCAL}:5432"
  #   volumes:
  #     - db_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  main-backend:
    build:
      context: ./main-backend
      dockerfile: Dockerfile  # <-- By default, it uses the production Dockerfile
    restart: always
    ports:
      - "3000:3000"
    # volumes:
    #   - shared_uploads:/app/uploads
    env_file:
      - ./main-backend/.env
    # depends_on:
    #   db:
    #     condition: service_healthy


  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    # volumes:
    #   - shared_uploads:/app/uploads
    env_file:
      - ./ai-service/.env
    depends_on:
      - main-backend
  frontend:
    build:
      context: ./frontend/front-end-ai-hub
      dockerfile: Dockerfile
    ports:
      - "80:3000"
    env_file:
      - ./frontend/front-end-ai-hub/.env.local
    # environment:
    #   # This tells Next.js to use the backend's service name
    #   - NEXT_PUBLIC_API_BASE_URL=http://main-backend:3000
    depends_on:
      - main-backend
# volumes:
#   db_data:
#   shared_uploads: